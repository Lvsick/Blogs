(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{373:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("笔记参考自"),s("a",{attrs:{href:"https://time.geekbang.org/column/intro/216?code=0",target:"_blank",rel:"noopener noreferrer"}},[t._v("极客时间-浏览器工作原理与实践"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"访问任何网站实际上只是你的计算机向另外一台计算机请求信息。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问任何网站实际上只是你的计算机向另外一台计算机请求信息。"}},[t._v("#")]),t._v(" 访问任何网站实际上只是你的计算机向另外一台计算机请求信息。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("过程")]),t._v(" "),s("p",[t._v("如果要想把一个数据包从主机 A 发送给主机 B，那么在传输之前，数据包上会被附加上主机 B 的 IP 地址信息，这样在传输过程中才能正确寻址。额外地，数据包上还会附加上主机 A 本身的 IP 地址，有了这些信息主机 B 才可以回复信息给主机 A。这些附加的信息会被装进一个叫 IP 头的数据结构里。IP 头是 IP 数据包开头的信息，包含 IP 版本、源 IP 地址、目标 IP 地址、生存时间等信息。")])]),t._v(" "),s("h3",{attrs:{id:"浏览器端发起-http-请求流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端发起-http-请求流程"}},[t._v("#")]),t._v(" 浏览器端发起 HTTP 请求流程")]),t._v(" "),s("h4",{attrs:{id:"_1-构建请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-构建请求"}},[t._v("#")]),t._v(" 1. 构建请求")]),t._v(" "),s("p",[s("code",[t._v("GET /index.html HTTP1.1")])]),t._v(" "),s("h4",{attrs:{id:"_2-查找缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找缓存"}},[t._v("#")]),t._v(" 2. 查找缓存")]),t._v(" "),s("p",[t._v("在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。其中，浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术。")]),t._v(" "),s("h4",{attrs:{id:"_3-准备-ip-地址和端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-准备-ip-地址和端口"}},[t._v("#")]),t._v(" 3. 准备 IP 地址和端口")]),t._v(" "),s("p",[t._v("浏览器使用 HTTP 协议作为应用层协议，用来封装请求的文本信息；并使用 TCP/IP 作传输层协议将它发到网络上，所以在 HTTP 工作开始之前，浏览器需要通过 TCP 与服务器建立连接。也就是说 HTTP 的内容是通过 TCP 的传输数据阶段来实现的。\n"),s("img",{attrs:{src:"https://static001.geekbang.org/resource/image/12/80/1277f342174b23f9442d3b27016d7980.png",alt:""}}),t._v("\n第一步浏览器会请求 DNS 返回域名对应的 IP。当然浏览器还提供了 DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求。拿到 IP 之后，接下来就需要获取端口号了。通常情况下，如果 URL 没有特别指明端口号，那么 HTTP 协议默认是 80 端口。")]),t._v(" "),s("h4",{attrs:{id:"_4-等待-tcp-队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-等待-tcp-队列"}},[t._v("#")]),t._v(" 4. 等待 TCP 队列")]),t._v(" "),s("p",[t._v("Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。")]),t._v(" "),s("h4",{attrs:{id:"_5-建立-tcp-连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-建立-tcp-连接"}},[t._v("#")]),t._v(" 5. 建立 TCP 连接")]),t._v(" "),s("p",[t._v("排队等待结束之后，终于可以快乐地和服务器握手了，在 HTTP 工作开始之前，浏览器通过 TCP 与服务器建立连接。")]),t._v(" "),s("h4",{attrs:{id:"_6-发送-http-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-发送-http-请求"}},[t._v("#")]),t._v(" 6. 发送 HTTP 请求")]),t._v(" "),s("p",[t._v("一旦建立了 TCP 连接，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。\n"),s("img",{attrs:{src:"https://static001.geekbang.org/resource/image/b8/d7/b8993c73f7b60feb9b8bd147545c47d7.png",alt:""}}),t._v("\n首先浏览器会向服务器发送请求行，它包括了请求方法、请求 URI（Uniform Resource Identifier）和 HTTP 版本协议。发送请求行，就是告诉服务器浏览器需要什么资源，最常用的请求方法是 Get。另外一个常用的请求方法是 POST，它用于发送一些数据给服务器，比如登录一个网站，就需要通过 POST 方法把用户信息发送给服务器。如果使用 POST 方法，那么浏览器还要准备数据给服务器，这里准备的数据是通过请求体来发送。在浏览器发送请求行命令之后，还要以请求头形式发送其他一些信息，把浏览器的一些基础信息告诉服务器。比如包含了浏览器所使用的操作系统、浏览器内核等信息，以及当前请求的域名信息、浏览器端的 Cookie 信息，等等。")]),t._v(" "),s("h3",{attrs:{id:"questions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#questions"}},[t._v("#")]),t._v(" questions")]),t._v(" "),s("h4",{attrs:{id:"_1-为什么很多站点第二次打开速度会很快"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么很多站点第二次打开速度会很快"}},[t._v("#")]),t._v(" 1.为什么很多站点第二次打开速度会很快？")]),t._v(" "),s("p",[t._v("如果第二次页面打开很快，主要原因是第一次加载页面过程中，缓存了一些耗时的数据。\n下面是缓存处理的过程：\n"),s("img",{attrs:{src:"https://static001.geekbang.org/resource/image/5f/08/5fc2f88a04ee0fc41a808f3481287408.png",alt:""}}),t._v("\n从上图的第一次请求可以看出，当服务器返回 HTTP 响应头给浏览器时，浏览器是通过响应头中的 Cache-Control 字段来设置是否缓存该资源。通常，我们还需要为这个资源设置一个缓存过期时长，而这个时长是通过 Cache-Control 中的 Max-age 参数来设置的，比如上图设置的缓存过期时间是 2000 秒。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Cache"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Max"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("\n")])])]),s("p",[t._v("这也就意味着，在该缓存资源还未过期的情况下, 如果再次请求该资源，会直接返回缓存中的资源给浏览器。但如果缓存过期了，浏览器则会继续发起网络请求，并且在 HTTP 请求头中带上：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("If"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("None"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Match"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4f80f-13c-3a1xb12a"')]),t._v("\n")])])]),s("ul",[s("li",[t._v("如果没有更新，就返回 304 状态码，相当于服务器告诉浏览器：“这个缓存可以继续使用，这次就不重复发送数据给你了。”")]),t._v(" "),s("li",[t._v("如果资源有更新，服务器就直接返回最新资源给浏览器。")])]),t._v(" "),s("h3",{attrs:{id:"_2-登录状态是如何保持的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-登录状态是如何保持的"}},[t._v("#")]),t._v(" 2. 登录状态是如何保持的？")]),t._v(" "),s("ul",[s("li",[t._v("用户打开登录页面，在登录框里填入用户名和密码，点击确定按钮。点击按钮会触发页面脚本生成用户登录信息，然后调用 POST 方法提交用户登录信息给服务器。")]),t._v(" "),s("li",[t._v("服务器接收到浏览器提交的信息之后，查询后台，验证用户登录信息是否正确，如果正确的话，会生成一段表示用户身份的字符串，并把该字符串写到响应头的 Set-Cookie 字段里，如下所示，然后把响应头发送给浏览器。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Set"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3431")]),t._v("uad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("浏览器在接收到服务器的响应头后，开始解析响应头，如果遇到响应头里含有 Set-Cookie 字段的情况，浏览器就会把这个字段信息保存到本地。比如把UID=3431uad保持到本地。")]),t._v(" "),s("li",[t._v("当用户再次访问时，浏览器会发起 HTTP 请求，但在发起请求之前，浏览器会读取之前保存的 Cookie 数据，并把数据写进请求头里的 Cookie 字段里（如下所示），然后浏览器再将请求头发送给服务器。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Cookie"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3431")]),t._v("uad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("服务器在收到 HTTP 请求头数据之后，就会查找请求头里面的“Cookie”字段信息，当查找到包含UID=3431uad的信息时，服务器查询后台，并判断该用户是已登录状态，然后生成含有该用户信息的页面数据，并把生成的数据发送给浏览器。")]),t._v(" "),s("li",[t._v("浏览器在接收到该含有当前用户的页面数据后，就可以正确展示用户登录的状态信息了。\nCookie 流程可以参考下图：\n"),s("img",{attrs:{src:"https://static001.geekbang.org/resource/image/d9/b3/d9d6cefe8d3d6d84a37a626687c6ecb3.png",alt:""}})])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("浏览器中的 HTTP 请求从发起到结束一共经历了如下八个阶段：构建请求、查找缓存、准备 IP 和端口、等待 TCP 队列、建立 TCP 连接、发起 HTTP 请求、服务器处理请求、服务器返回请求和断开连接。")])])}),[],!1,null,null,null);a.default=r.exports}}]);